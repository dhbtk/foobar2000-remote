import { app, BrowserWindow, ipcMain } from 'electron'
import { Client as SsdpClient } from 'node-ssdp'
import { setup as upnpSetup } from './upnp/main'
import { setup } from './stream/metadataMain'
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit()
}

app.name = 'foobar2000-remote'
app.setAboutPanelOptions({
  applicationName: 'foobar2000-remote',
  applicationVersion: process.env.npm_package_version,
  copyright: '(c) 2021 @dhbtk',
  version: '69420'
})

ipcMain.handle('ssdp-search', (event, query) => new Promise((resolve) => {
  const ssdpClient = new SsdpClient()
  ssdpClient.on('response', (data: { LOCATION: string }) => {
    resolve(data.LOCATION)
  })
  ssdpClient.search(query)
}))

upnpSetup(ipcMain)

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    show: false,
    webPreferences: {
      nodeIntegration: true,
      nodeIntegrationInWorker: true,
      contextIsolation: false,
      webSecurity: false
    }
  })
  mainWindow.maximize()
  mainWindow.show()
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  setup(mainWindow)
  /*installExtension([REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS])
    .then((name) => console.log(`Added Extension:  ${name}`))
    .catch((err) => console.log('An error occurred: ', err))
    .then(() => )*/

}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

app.commandLine.appendSwitch('disable-features', 'OutOfBlinkCors')
app.commandLine.appendSwitch('disable-site-isolation-trials')
